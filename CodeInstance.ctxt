#BlueJ class context
comment0.target=CodeInstance
comment0.text=\n\ This\ class\ analyzes\ a\ node\ and\ convert\ it\ from\ String\n\ to\ LateX\ expression.\n\n\ @author\ Roberto\ Ferrari\n\ @version\ v0.1\n
comment1.params=
comment1.target=CodeInstance()
comment1.text=\n\ Constructors\ for\ objects\ of\ class\ CodeInstance.\n
comment10.params=node\ grade
comment10.target=java.lang.String\ makeRoot(CodeInstance,\ CodeInstance)
comment10.text=\n\ Return\ the\ root\ of\ a\ nodes.\n\n\ @param\ grade\ is\ a\ String\ and\ represents\ the\ grade\ of\ the\ root.\n\ @param\ node\ is\ a\ String\ and\ represents\ the\ node\ to\ be\ place\ on\ the\ root.\n\ @return\ the\ entire\ division\ in\ LateX\ code.\n
comment11.params=node\ variable\ num
comment11.target=java.lang.String\ makeLimit(CodeInstance,\ CodeInstance,\ CodeInstance)
comment11.text=\n\ Return\ the\ limit\ of\ a\ nodes.\n\n\ @param\ grade\ is\ a\ String\ and\ represents\ the\ grade\ of\ the\ root.\n\ @param\ node\ is\ a\ String\ and\ represents\ the\ node\ to\ be\ place\ on\ the\ root.\n\ @return\ the\ entire\ division\ in\ LateX\ code.\n
comment2.params=value
comment2.target=CodeInstance(java.lang.String)
comment3.params=
comment3.target=java.lang.String\ getValue()
comment3.text=\n\ Return\ the\ value\ of\ the\ object.\n\n\ @return\ The\ value\ of\ the\ object.\n
comment4.params=value
comment4.target=void\ setValue(java.lang.String)
comment5.params=firstNode\ secondNode
comment5.target=java.lang.String\ makeAddition(CodeInstance,\ CodeInstance)
comment5.text=\n\ Return\ the\ addition\ from\ two\ nodes.\n\n\ @param\ other\ is\ a\ node\ of\ an\ expression.\n\ @return\ the\ entire\ addition\ in\ LateX\ code.\n
comment6.params=firstNode\ secondNode
comment6.target=java.lang.String\ makeSubtraction(CodeInstance,\ CodeInstance)
comment6.text=\n\ Return\ the\ subtraction\ from\ two\ nodes.\n\n\ @param\ firstNode\ is\ a\ String\ and\ represents\ the\ first\ node\ of\ the\ subraction.\n\ @param\ secondNode\ is\ a\ String\ and\ represents\ the\ second\ node\ of\ the\ subtraction.\n\ @return\ the\ entire\ subtraction\ in\ LateX\ code.\n
comment7.params=firstNode\ secondNode
comment7.target=java.lang.String\ makeMultiplication(CodeInstance,\ CodeInstance)
comment7.text=\n\ Return\ the\ multiplication\ from\ two\ nodes.\n\n\ @param\ firstNode\ is\ a\ String\ and\ represents\ the\ first\ node\ of\ the\ multiplication.\n\ @param\ secondNode\ is\ a\ String\ and\ represents\ the\ second\ node\ of\ the\ multiplication.\n\ @return\ the\ entire\ multiplication\ in\ LateX\ code.\n
comment8.params=firstNode\ secondNode
comment8.target=java.lang.String\ makeDivision(CodeInstance,\ CodeInstance)
comment8.text=\n\ Return\ the\ division\ from\ two\ nodes.\n\n\ @param\ firstNode\ is\ a\ String\ and\ represents\ the\ first\ node\ of\ the\ division.\n\ @param\ secondNode\ is\ a\ String\ and\ represents\ the\ second\ node\ of\ the\ division.\n\ @return\ the\ entire\ division\ in\ LateX\ code.\n
comment9.params=node\ exponent
comment9.target=java.lang.String\ makePower(CodeInstance,\ CodeInstance)
comment9.text=\n\ Return\ the\ power\ from\ two\ nodes.\n\n\ @param\ node\ is\ a\ String\ and\ represents\ the\ node\ to\ be\ raised\ to\ a\ power.\n\ @param\ exponent\ is\ a\ String\ and\ represents\ the\ the\ number\ which\ raises\ the\ node.\n\ @return\ the\ entire\ exponentation\ in\ LateX\ code.\n
numComments=12
